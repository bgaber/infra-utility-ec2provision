---

- name: Start Linux Instance
  ec2_instance:
    security_groups: "{{ linux_sec_gps }}"
    image_id: "{{ found_base_ami.images.0.image_id }}"
    metadata_options:
      http_endpoint: enabled
      http_tokens: required
    tags:
      Name: "{{ instance_name }}"
      Application: "{{ application }}"
      ComplianceClassification: "{{ compliance_classification }}"
      Created: "{{ lookup('pipe','date +%Y-%m-%d') }}"
      Creator: "{{ tower_user_name }}"
      DataClassification: "{{ data_classification }}"
      OS: "{{ osselection }}"
      Owner: "{{ owner }}"
    instance_type: "{{ instance_type }}"
    key_name: "{{ target_key }}"
    region: "{{ target_region }}"
    aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
    aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    security_token: "{{ assumed_role.sts_creds.session_token }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          delete_on_termination: true
          volume_type: gp2
          volume_size: 100
    vpc_subnet_id: "{{ target_subnet_id }}"
    wait: yes
    wait_timeout: 500
  register: created_instance

- name: New Linux EC2 Instance Metadata
  debug:
    var: created_instance

- name: Create and attach 2nd Volume
  ec2_vol:
    aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
    aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    security_token: "{{ assumed_role.sts_creds.session_token }}"
    delete_on_termination: no
    device_name: /dev/sdf
    encrypted: yes
    instance: "{{ created_instance.instance_ids.0 }}"
    name: "{{ instance_name }} App Volume"
    region: "{{ target_region }}"
    tags:
      Name: "{{ instance_name }}"
      Application: "{{ application }}"
      ComplianceClassification: "{{ compliance_classification }}"
      Created: "{{ lookup('pipe','date +%Y-%m-%d') }}"
      Creator: "{{ tower_user_name }}"
      DataClassification: "{{ data_classification }}"
      OS: "{{ osselection }}"
      Owner: "{{ owner }}"
    volume_size: 50
    volume_type: gp2

- name: Set default backup tag value if requested
  set_fact:
    backup_tag: "DEFAULT_POLICY"
  when: (isbackup == "yes")

- name: Set Test Backup Tag
  set_fact:
    backup_tag: "Test_Instance_Backup"
  when: (buildenv == "us-test")

- name: Set Dev Backup Tag
  set_fact:
    backup_tag: "Dev_Instance_Backup"
  when: (buildenv == "us-dev")

- name: Set Prod Talend Backup Tag
  set_fact:
    backup_tag: "TLD_USPROD_POLICY_EC2_4WEEKLY TLD_USPROD_POLICY_EC2_7DAILY"
  when: (buildenv == "us-prod") and (application == "Talend")

- name: Set Prod ForgeRock Backup Tag
  set_fact:
    backup_tag: "FRK_USPROD_POLICY_EC2_7DAILY"
  when: (buildenv == "us-prod") and (application == "Forgerock")

- name: Set Test ForgeRock Backup Tag
  set_fact:
    backup_tag: "FRK_USTEST_POLICY_EC2_7DAILY"
  when: (buildenv == "us-test") and (application == "Forgerock")

- name: Set Dev SRETools Backup Tag
  set_fact:
    backup_tag: "SRE_USDEV_POLICY_EC2_7DAILY"
  when: (buildenv == "us-dev") and (application == "SRETools")

- name: Add Backup Tag
  ec2_tag:
    region: "{{ target_region }}"
    aws_access_key: "{{ assumed_role.sts_creds.access_key }}"
    aws_secret_key: "{{ assumed_role.sts_creds.secret_key }}"
    security_token: "{{ assumed_role.sts_creds.session_token }}"
    resource: "{{ created_instance.instance_ids.0 }}"
    state: present
    tags:
      cpm backup: "{{ backup_tag }}"

- name: Private IP Address
  debug:
    msg: "Private IPv4 Address: {{ created_instance.instances.0.private_ip_address }}"

- name: Add Host to Inventory (Linux)
  add_host:
    ansible_host: "{{ created_instance.instances.0.private_ip_address }}"
    ansible_user: "{{ target_ans_user }}"
    groupname: new_launch_linux
    name: "{{ instance_name }}"
    region: "{{ target_region }}"
    application: "{{ application }}"
    #shared_variable:  "{{ assumed_role }}"
  when: (osselection == "centos7") or (osselection == "centos8") or (osselection == "rhel7") or (osselection == "rhel8")

- name: Wait for Sytem to be reachable (Linux)
  wait_for:
    host: "{{ created_instance.instances.0.private_ip_address }}"
    port: 22
  when: (osselection == "centos7") or (osselection == "centos8") or (osselection == "rhel7") or (osselection == "rhel8")
